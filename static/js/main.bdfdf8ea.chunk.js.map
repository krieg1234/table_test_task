{"version":3,"sources":["app/dataSlice.js","features/tableComponent/TableComponent.jsx","features/optionsBar/OptionsBar.jsx","features/addDataForm/AddDataForm.jsx","features/detailData/DetailData.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchData","createAsyncThunk","a","dataDisplayMode","dataUrls","big","small","fetch","responce","json","dataSlice","createSlice","name","initialState","dataById","allData","status","error","tableFieldsHeader","reducers","addData","state","payload","newData","id","Number","extraReducers","pending","rejected","message","fulfilled","map","data","reduce","acc","actions","selectTableFields","TableComponent","props","tableHeaders","useSelector","sortMode","textFilter","setSortMode","currentDataId","setCurrentDataId","tableData","filtredData","dataId","header","filter","dataRow","String","includes","field","sortData","sortBy","isDirect","reverse","headerClickHandler","e","newSortField","newSortDirection","buildHeaderClassName","className","push","join","React","useState","page","setPage","rowsPerPage","setRowsPerPage","TablePagination","component","count","length","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","Table","striped","bordered","hover","onClick","_","index","indexRow","style","fontWeight","OptionsBar","dispatch","useDispatch","setTextFilter","textFilterInputValue","setTextFilterInputValue","displayMode","setDisplayMode","dataStatus","ButtonGroup","Button","disabled","undefined","Form","onSubmit","preventDefault","Group","as","Row","Col","sm","Control","type","placeholder","onChange","textAlign","AddDataForm","formFields","defaultInputs","formik","useFormik","initialValues","validationSchema","Yup","matches","required","test","firstName","lastName","email","phone","values","Accordion","Toggle","variant","eventKey","Collapse","handleSubmit","Label","handleChange","onBlur","handleBlur","touched","errors","Text","DetailData","address","description","md","rows","width","streetAddress","city","zip","App","useEffect","contentByStatus","Container","configureStore","reducer","dataReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdfdf8ea.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nexport const fetchData=createAsyncThunk('data/fetchedData', async (dataDisplayMode='small')=>{\r\n  const dataUrls={ //url в записимости от displayMod\r\n    big:'http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D',\r\n    small:'http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D'\r\n  }\r\n  const responce=await fetch(dataUrls[dataDisplayMode]);\r\n  const json=await responce.json();\r\n  return json;\r\n})\r\n\r\n\r\n\r\nexport const dataSlice=createSlice({\r\n  name:'data',\r\n  initialState:{\r\n    dataById:{},\r\n    allData:[],\r\n    status:'idle',\r\n    error:null,\r\n    tableFieldsHeader:['id','firstName','lastName','email','phone'], //колонки для табилцы или формы новых данных\r\n\r\n  },\r\n  reducers:{\r\n    addData:(state,{payload})=>{\r\n      const newData={...payload, id:Number(payload.id)}; //с сервера получаем id в виде числа, приводим payload в соответствие\r\n      return {\r\n        ...state,\r\n        allData:[...state.allData, newData.id],\r\n        dataById:{...state.dataById, [newData.id]:{...newData}}\r\n      };\r\n    },\r\n  },\r\n  extraReducers:{ //редьюсеры для асинхронного запроса\r\n[fetchData.pending]:(state)=>{\r\n  state.status='loading';\r\n},\r\n[fetchData.rejected]:(state,{error})=>{\r\n  state.status='failed';\r\n  state.error=error.message;\r\n},\r\n[fetchData.fulfilled]:(state,{payload})=>{\r\n  state.status='success';\r\n  state.allData=payload.map(data=>data.id);\r\n  state.dataById=payload.reduce((acc,data)=>({...acc,[data.id]:data}),{});\r\n \r\n}\r\n  }\r\n});\r\n\r\nexport const {addData}=dataSlice.actions;\r\nexport const selectTableFields=(state)=>state.data.tableFieldsHeader; //возвращает заголоки таблицы\r\n\r\n\r\nexport default dataSlice.reducer;","import React from 'react';\r\nimport './style.css';\r\nimport { Table } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport {selectTableFields} from '../../app/dataSlice'\r\nimport {sortBy} from 'lodash'\r\nimport { TablePagination } from '@material-ui/core';\r\n\r\nexport function TableComponent(props){\r\n  \r\n  const tableHeaders=useSelector(selectTableFields); \r\n  const {\r\n    sortMode, \r\n    textFilter, \r\n    setSortMode, \r\n    currentDataId, \r\n    setCurrentDataId,\r\n  }=props;\r\n\r\n  const tableData=useSelector((state)=>{\r\n    const {allData,dataById}=state.data;\r\n    //получаем данные в соответствии с заголовками табилцы\r\n    const rawData= allData.map(dataId=>(\r\n      tableHeaders.reduce((acc,header)=>{\r\n        return {...acc,[header]:dataById[dataId][header]}\r\n      },{})));\r\n\r\n    //фильтруем\r\n    const filtredData=rawData.filter(dataRow=>{\r\n      return tableHeaders.reduce((acc,header)=>{\r\n        if (acc) return true;\r\n        return String(dataRow[header]).includes(textFilter);\r\n      },false);\r\n    });\r\n\r\n    //сортируем\r\n    \r\n    if (!sortMode.field) return filtredData;\r\n    const sortData=sortBy(filtredData,[\r\n      (dataRow)=>(dataRow[sortMode.field])\r\n    ]);\r\n    return sortMode.isDirect? sortData:sortData.reverse();    \r\n  });\r\n  \r\n  const headerClickHandler=(header)=>(e)=>{\r\n    const newSortField=header;\r\n    const newSortDirection=(newSortField===sortMode.field)?(!sortMode.isDirect):true;\r\n    \r\n    setSortMode({\r\n      field:newSortField, \r\n      isDirect:newSortDirection\r\n    });\r\n  }\r\n  //задаём классы для стилизации сортируемого столбца\r\n  const buildHeaderClassName=(header)=>{\r\n    const className=[];\r\n    if (header===sortMode.field){\r\n      className.push('sortField')\r\n      if (sortMode.isDirect) className.push('direct');\r\n      else className.push('reverse');\r\n    }\r\n    return className.join(' ');\r\n  }\r\n\r\n  //пегитация\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n  <div className='data-table'>\r\n    <TablePagination\r\n        component=\"div\"\r\n        count={tableData.length}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        rowsPerPage={rowsPerPage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n    />\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          {tableHeaders   \r\n            .map(header=>(\r\n              <th \r\n                key={header}\r\n                className={`${buildHeaderClassName(header)}`}\r\n                onClick={headerClickHandler(header)}              \r\n              >{header}</th>\r\n            ))}\r\n        </tr>        \r\n      </thead>\r\n      <tbody>\r\n        {tableData.filter((_,index)=>{\r\n              const isInRange=(index>=page*rowsPerPage) && (index<page*rowsPerPage+rowsPerPage)\r\n              return (isInRange)\r\n            })       \r\n            .map((dataRow,indexRow)=>(\r\n          <tr \r\n            style={dataRow.id===currentDataId?{fontWeight:'900'}:{}} \r\n            key={indexRow} \r\n            onClick={()=>setCurrentDataId(dataRow.id)\r\n          }>\r\n            {tableHeaders.map((header,index)=>(\r\n              <td  key={header+index}>{dataRow[header]}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n      \r\n    </Table>\r\n    \r\n  </div>\r\n    \r\n  )\r\n}","import React, {useState} from 'react';\r\nimport {Form, Row, Col, Button, ButtonGroup } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchData } from '../../app/dataSlice';\r\n\r\nexport function OptionsBar(props){\r\n  const dispatch=useDispatch();\r\n  const { setTextFilter, setCurrentDataId}=props;\r\n\r\n  const [textFilterInputValue, setTextFilterInputValue]=useState('');\r\n  const [displayMode, setDisplayMode]=useState('small');//строчные параметры не очень\r\n\r\n  //лоя блокировки кнопок при загрузке данных\r\n  const dataStatus=useSelector((state)=>(state.data.status));\r\n\r\n  return (\r\n  <div className='optionBar'>\r\n    <div className='displayMode-options my-5'>\r\n      <p>Набор данных:</p>\r\n      <ButtonGroup>\r\n        <Button disabled={displayMode==='big'||dataStatus!=='success'} onClick={()=>{\r\n          setCurrentDataId(undefined);\r\n          setDisplayMode('big');\r\n          dispatch(fetchData('big'))}}>Большой</Button>\r\n        <Button disabled={displayMode==='small'||dataStatus!=='success'} onClick={()=>{\r\n          setDisplayMode('small');\r\n          dispatch(fetchData('small'))}}>Маленький</Button>\r\n      </ButtonGroup>\r\n      \r\n    </div>\r\n    <div className='textFilte-form my-5'>\r\n      <Form onSubmit={(e)=>{\r\n        e.preventDefault();\r\n        setTextFilter(textFilterInputValue);\r\n      }}>\r\n        <Form.Group as={Row} >\r\n          <Col sm={6}>\r\n            <Form.Control \r\n              type='search' \r\n              placeholder='поиск по таблице...' \r\n              value={textFilterInputValue} \r\n              onChange={(e)=>setTextFilterInputValue(e.target.value)} /> \r\n          </Col>\r\n          <Col sm={6} style={{textAlign:'left'}}>\r\n              <Button type='submit' disabled={!textFilterInputValue||dataStatus!=='success'}>Поиск</Button>\r\n          </Col>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n    \r\n  </div>\r\n    \r\n  )\r\n}","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTableFields } from '../../app/dataSlice';\r\nimport { Col, Form, Row,Button, Accordion } from 'react-bootstrap';\r\nimport { addData } from '../../app/dataSlice';\r\n\r\n export function AddDataForm(props) {\r\n  const dispatch=useDispatch();\r\n  const formFields=useSelector(selectTableFields);\r\n  const allData=useSelector((state)=>state.data.allData);\r\n  const defaultInputs=formFields.reduce((acc,field)=>({...acc,[field]:''}),{});\r\n  const formik = useFormik({\r\n     initialValues: {...defaultInputs},\r\n     validationSchema: Yup.object({\r\n       id: Yup.string() \r\n        .matches(/^[0-9]{1,4}$/,'Неверный формат id') //валидные цифры\r\n        .required('Заполните')\r\n        .test('duplicateId', 'Дублирование Id запрещено',  (value)=>!allData.includes(Number(value))),\r\n       firstName: Yup.string() \r\n        .matches( /^([A-Z]{1}[a-z]{2,20})$/,'Неверный формат имени') //валидные буквы и первая заглавная\r\n        .required('Заполните'),\r\n       lastName: Yup.string()\r\n        .matches( /^([A-Z]{1}[a-z]{2,20})$/,'Неверный формат фамилии') //валидные буквы и первая заглавная\r\n        .required('Заполните'),\r\n       email: Yup.string()\r\n        .email('Неверный формат email') //валидные форматы мэйл с @ и .\r\n        .required('Заполните'),\r\n       phone: Yup.string()\r\n        .required('Заполните') \r\n        .matches(/^[(]{1}[0-9]{3}\\)[0-9]{3}[-]{1}[0-9]{4}$/, 'Неверный формат номера') //валидны (ххх)ххх-хххх цифры\r\n     }),\r\n     onSubmit: values => {\r\n      dispatch(addData(values));\r\n     },\r\n   });\r\n   const dataStatus=useSelector((state)=>(state.data.status));\r\n   return (\r\n     <Accordion>\r\n       <Accordion.Toggle as={Button} variant='link' eventKey='0'>Добавить</Accordion.Toggle>\r\n       <Accordion.Collapse eventKey='0'>\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          <Row>\r\n            {formFields.map(field=>(\r\n              <Col key={field+'input'}>\r\n                <Form.Group>\r\n                  <Form.Label>{field}</Form.Label>\r\n                  <Form.Control\r\n                    id={field}\r\n                    name={field}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values[field]} \r\n                  />\r\n                  {formik.touched[field] && formik.errors[field] ? (\r\n                    <Form.Text>{formik.errors[field]}</Form.Text>\r\n                    ) : null}\r\n                </Form.Group>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Button disabled={dataStatus!=='success'} type='submit'>Добавить в таблицу</Button>\r\n            </Col>            \r\n          </Row>\r\n        </Form>\r\n       </Accordion.Collapse>\r\n     </Accordion>\r\n    \r\n   );\r\n };","import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function DetailData(props){\r\n  const {currentDataId}=props;\r\n  const {\r\n    id,\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    phone,\r\n    address,\r\n    description\r\n  }=useSelector((state)=>state.data.dataById[currentDataId]);\r\n//с проверками на случай отсутствия данных об адресе (возможно стоит сделать красивее)\r\n  return (\r\n    <div className='data-details' style={{textAlign:'left'}}>\r\n      <Row>\r\n        <Col md={6}>\r\n          <p>Выбран пользователь: <b id='detail-name'>{`${firstName} ${lastName}`}</b></p>\r\n          <p >Описание:</p>\r\n          <textarea id='detail-description' rows={5} style={{width:'100%'}} value={description?description:'Нет данных'} onChange={()=>(null)} />\r\n          <p>Адрес проживания: <b id='detail-streetAddress'>{address?address.streetAddress:'Нет данных'}</b></p>\r\n          <p>Город: <b id='detail-city'>{address?address.city:'Нет данных'}</b></p>\r\n          <p>Провинция/штат: <b id='detail-state'>{address?address.state:'Нет данных'}</b></p>\r\n          <p>Индекс: <b id='detail-zip'>{address?address.zip:'Нет данных'}</b></p>\r\n        </Col>  \r\n      </Row>      \r\n      \r\n    </div>\r\n  )\r\n}","\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { TableComponent } from './features/tableComponent/TableComponent';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchData } from './app/dataSlice';\r\nimport { Container, Form, Row, Col, Button } from 'react-bootstrap';\r\nimport { OptionsBar } from './features/optionsBar/OptionsBar';\r\nimport { AddDataForm } from './features/addDataForm/AddDataForm';\r\nimport { DetailData } from './features/detailData/DetailData';\r\n\r\nfunction App() {\r\n  const dispatch=useDispatch();\r\n  //загрузка данных с сервера\r\n  const dataStatus=useSelector((state)=>({\r\n    status: state.data.status,\r\n    error:state.data.error,\r\n  }));\r\n  useEffect(()=>{\r\n    if (dataStatus.status==='idle'){\r\n      dispatch(fetchData());\r\n    }\r\n  },[dataStatus,dispatch])\r\n\r\n\r\n  //хуки для настроек\r\n  const [displayMode, setDisplayMode]=useState('smallData') //стринга не круто\r\n  const [sortMode,setSortMode]=useState({\r\n    field:'id',\r\n    isDirect:true, \r\n  });\r\n  const [textFilter, setTextFilter]=useState('');\r\n\r\n  //хук для выбора строки\r\n  const [currentDataId,setCurrentDataId]=useState(undefined);\r\n\r\n  //таблица в зависимости от статуса запроса\r\n  const contentByStatus={\r\n    'loading':(<div>Загрузка...</div>),\r\n    'failed':(<div>Ошибка! {dataStatus.error}</div>),\r\n    'success':(\r\n      <TableComponent \r\n        setSortMode={setSortMode} \r\n        sortMode={sortMode} \r\n        textFilter={textFilter}\r\n        currentDataId={currentDataId}\r\n        setCurrentDataId={setCurrentDataId}\r\n      />),\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        <OptionsBar setCurrentDataId={setCurrentDataId} setTextFilter={setTextFilter}/>\r\n        <AddDataForm />\r\n        {contentByStatus[dataStatus.status]}\r\n        {currentDataId?(<DetailData currentDataId={currentDataId} />):(<p>Для отображения детальных записей, выделите строку</p>)}\r\n      </Container>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport dataReducer from './dataSlice'\r\nexport default configureStore({\r\n  reducer: {\r\n    data:dataReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}